import time
import random
import json
import threading
import tkinter as tk
from tkinter import ttk, messagebox
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

# Load danh s√°ch t√†i kho·∫£n
def load_accounts():
    try:
        with open("accounts.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# L∆∞u t√†i kho·∫£n
def save_accounts(accounts):
    with open("accounts.json", "w") as file:
        json.dump(accounts, file, indent=4)

# ƒêƒÉng nh·∫≠p Facebook v√† ƒë·ª£i nh·∫≠p CAPTCHA & 2FA
def login_facebook(driver, email_or_phone, password):
    driver.get("https://www.facebook.com/")
    time.sleep(random.uniform(2, 5))

    email_input = driver.find_element(By.ID, "email")
    password_input = driver.find_element(By.ID, "pass")

    # Ki·ªÉm tra v√† s·ª≠ d·ª•ng email, s·ªë ƒëi·ªán tho·∫°i ho·∫∑c UID
    email_input.send_keys(email_or_phone)  # D√πng email, s·ªë ƒëi·ªán tho·∫°i ho·∫∑c UID
    password_input.send_keys(password)
    time.sleep(random.uniform(1, 3))
    password_input.send_keys(Keys.RETURN)
    
    log(f"[üîê] {email_or_phone} ƒëang ch·ªù nh·∫≠p CAPTCHA & 2FA...")

    # Ch·ªù ng∆∞·ªùi d√πng nh·∫≠p CAPTCHA & 2FA r·ªìi b·∫•m "L·ª•m!"
    global waiting_for_login
    waiting_for_login = True
    while waiting_for_login:
        time.sleep(1)

    log(f"[‚úÖ] {email_or_phone} ƒëƒÉng nh·∫≠p th√†nh c√¥ng!")

# Auto like & comment
def auto_interact(driver, email):
    start_time = time.time()
    duration = 300  # Ch·∫°y 5 ph√∫t

    while time.time() - start_time < duration:
        driver.execute_script("window.scrollBy(0, 800);")
        time.sleep(random.uniform(2, 5))

        posts = driver.find_elements(By.XPATH, "//div[@role='article']")
        if posts:
            post = random.choice(posts)
            try:
                like_button = post.find_element(By.XPATH, ".//span[text()='Th√≠ch' or text()='Like']")
                like_button.click()
                log(f"[üëç] {email} ƒë√£ like b√†i vi·∫øt")

                comment_box = post.find_element(By.XPATH, ".//div[@aria-label='Vi·∫øt b√¨nh lu·∫≠n']")
                comment_box.click()
                comment_box.send_keys(random.choice(["Hay qu√°!", "Tuy·ªát v·ªùi!", "ƒê·ªânh th·∫≠t!"]))
                comment_box.send_keys(Keys.RETURN)
                log(f"[üí¨] {email} ƒë√£ comment b√†i vi·∫øt!")
            except:
                pass
        time.sleep(random.uniform(10, 20))

# H√†m ch·∫°y tool cho t·ª´ng t√†i kho·∫£n
def run_account(email_or_phone, password):
    options = webdriver.ChromeOptions()
    options.add_argument("--disable-notifications")
    
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    try:
        login_facebook(driver, email_or_phone, password)
        auto_interact(driver, email_or_phone)
        update_status(email_or_phone, "‚úÖ Ho√†n th√†nh")
    except Exception as e:
        update_status(email_or_phone, f"‚ùå L·ªói: {e}")
    finally:
        driver.quit()  # ƒê·∫£m b·∫£o tr√¨nh duy·ªát ƒë√≥ng sau khi ho√†n th√†nh

# Ch·∫°y tool ƒëa lu·ªìng
def start_tool():
    global running
    running = True
    accounts = load_accounts()

    threads = []
    for account in accounts:
        if not running:
            break
        email_or_phone = account["email_or_phone"]  # S·ª≠ d·ª•ng ƒë√∫ng kh√≥a "email_or_phone"
        password = account["password"]

        update_status(email_or_phone, "‚è≥ ƒêang ch·∫°y...")
        thread = threading.Thread(target=run_account, args=(email_or_phone, password))
        threads.append(thread)
        thread.start()
        time.sleep(5)

    for thread in threads:
        thread.join()

# D·ª´ng tool
def stop_tool():
    global running
    running = False
    log("[üõë] Tool ƒë√£ d·ª´ng!")

# C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n tr√™n GUI
def update_status(email, status):
    for item in tree.get_children():
        values = tree.item(item, "values")
        if values[0] == email:
            tree.item(item, values=(values[0], values[1], status))
            break

# Log ho·∫°t ƒë·ªông tr√™n giao di·ªán
def log(message):
    log_text.insert(tk.END, message + "\n")
    log_text.see(tk.END)

# B·∫•m "L·ª•m!" ƒë·ªÉ ti·∫øp t·ª•c sau khi nh·∫≠p CAPTCHA & 2FA
def confirm_login():
    global waiting_for_login
    waiting_for_login = False
    log("[üöÄ] B·∫Øt ƒë·∫ßu auto nu√¥i Facebook!")

# Giao di·ªán ch√≠nh
def gui():
    global tree, log_text
    root = tk.Tk()
    root.title("üöÄ Tool Auto Nu√¥i Acc Facebook üöÄ")
    root.geometry("600x500")

    # Frame qu·∫£n l√Ω t√†i kho·∫£n
    frame_accounts = ttk.LabelFrame(root, text="Qu·∫£n l√Ω t√†i kho·∫£n")
    frame_accounts.pack(fill="both", padx=10, pady=5)

    tree = ttk.Treeview(frame_accounts, columns=("Email", "M·∫≠t kh·∫©u", "Tr·∫°ng th√°i"), show="headings")
    tree.heading("Email", text="Email")
    tree.heading("M·∫≠t kh·∫©u", text="M·∫≠t kh·∫©u")
    tree.heading("Tr·∫°ng th√°i", text="Tr·∫°ng th√°i")
    tree.column("Email", width=180)
    tree.column("M·∫≠t kh·∫©u", width=120)
    tree.column("Tr·∫°ng th√°i", width=180)
    tree.pack(fill="both", padx=5, pady=5)

    # N√∫t th√™m/x√≥a t√†i kho·∫£n
    btn_frame = ttk.Frame(root)
    btn_frame.pack(fill="both", padx=10, pady=5)

    def add_account():
        email_or_phone = uid_var.get().strip()  # ƒê√¢y c√≥ th·ªÉ l√† email, s·ªë ƒëi·ªán tho·∫°i, ho·∫∑c UID
        password = pass_var.get().strip()

        if not email_or_phone or not password:
            print("L·ªói: Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p")
            return

        accounts = load_accounts()

        # ƒê·∫£m b·∫£o l∆∞u t√†i kho·∫£n v·ªõi kh√≥a ƒë√∫ng l√† "email_or_phone"
        new_account = {"email_or_phone": email_or_phone, "password": password}
        accounts.append(new_account)

        save_accounts(accounts)

        tree.insert("", "end", values=(email_or_phone, password, "üü¢ S·∫µn s√†ng"))
        uid_var.set("")
        pass_var.set("")



    def delete_account():
        selected_item = tree.selection()
        if selected_item:
            values = tree.item(selected_item, "values")
            email_to_delete = values[0]
            accounts = load_accounts()
            accounts = [acc for acc in accounts if acc["email"] != email_to_delete]
            save_accounts(accounts)
            tree.delete(selected_item)
            log(f"[üóë] ƒê√£ x√≥a t√†i kho·∫£n {email_to_delete}")
        else:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn t√†i kho·∫£n c·∫ßn x√≥a!")

    # Kh·ªüi t·∫°o c√°c bi·∫øn cho UID v√† m·∫≠t kh·∫©u
    uid_var = tk.StringVar()
    pass_var = tk.StringVar()

    # Th√™m v√†o GUI
    ttk.Label(btn_frame, text="Email/SƒêT/UID:").grid(row=0, column=0, padx=5, pady=5)
    ttk.Entry(btn_frame, textvariable=uid_var, width=20).grid(row=0, column=1, padx=5, pady=5)
    ttk.Label(btn_frame, text="M·∫≠t kh·∫©u:").grid(row=0, column=2, padx=5, pady=5)
    ttk.Entry(btn_frame, textvariable=pass_var, width=20).grid(row=0, column=3, padx=5, pady=5)
    ttk.Entry(btn_frame, textvariable=pass_var, width=20).grid(row=0, column=3, padx=5, pady=5)
    ttk.Button(btn_frame, text="‚ûï Th√™m", command=add_account).grid(row=0, column=4, padx=5, pady=5)  
    ttk.Button(btn_frame, text="‚ùå X√≥a", command=delete_account).grid(row=0, column=5, padx=5, pady=5)
    # N√∫t ƒëi·ªÅu khi·ªÉn tool
    ttk.Button(root, text="‚ñ∂ B·∫Øt ƒë·∫ßu", command=lambda: threading.Thread(target=start_tool).start()).pack(fill="both", padx=10, pady=5)
    ttk.Button(root, text="‚èπ D·ª´ng tool", command=stop_tool).pack(fill="both", padx=10, pady=5)

    # N√∫t "L·ª•m!" ƒë·ªÉ x√°c nh·∫≠n ƒë√£ nh·∫≠p CAPTCHA & 2FA
    ttk.Button(root, text="üéØ L·ª•m!", command=confirm_login).pack(fill="both", padx=10, pady=5)

    # Khung log
    frame_log = ttk.LabelFrame(root, text="Nh·∫≠t k√Ω ho·∫°t ƒë·ªông")
    frame_log.pack(fill="both", padx=10, pady=5)
    log_text = tk.Text(frame_log, height=8)
    log_text.pack(fill="both", padx=5, pady=5)

    root.mainloop()

if __name__ == "__main__":
    gui()